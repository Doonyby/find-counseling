package com.findCounseling.project.user;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.UUID;

@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;
    public User getUserById(String id) {
        User user = userRepository.findById(id).orElse(null);
        System.out.println(user);
        return user;
    }

    public User createUser(User user) {
        // Generate a random ID for the user
        // This was info about the UUID from copilot that I found super cool enough to want to share:
        // UUIDs (Universally Unique Identifiers) are 128-bit values.
        // The sheer size of the number space (2^128) makes it unlikely that a UUID will be repeated.
        // UUIDs are generated using a combination of unique elements such as the current timestamp,
        // a machine's MAC address, and random or pseudo-random numbers.
        // This combination ensures that each UUID is unique across space and time.
        // The version 4 UUIDs, which are commonly used and generated by UUID.randomUUID(),
        // are particularly designed for creating UUIDs with a high degree of randomness.
        // They use random or pseudo-random numbers for all their bits,
        // except for 6 bits which are used for version and variant information.
        // This results in a total of 122 random bits,
        // and the chance of collision (generating the same UUID twice) is astronomically low.
        // In practical terms, even if a billion UUIDs were generated every second for the next 100 years,
        // the probability of a single duplicate would be about 0.00000000000000000000000000001%.
        String id = UUID.randomUUID().toString();
        user.setId(id);
        if (!validateUser(user)) throw new IllegalArgumentException("Invalid user");
        System.out.println("User created: " + user);
        return userRepository.save(user);
    }

    public User updateUser(User user) {
        if (!validateUser(user)) throw new IllegalArgumentException("Invalid user");
        System.out.println("User updated: " + user);
        return userRepository.save(user);
    }

    public void deleteUser(String id) {
        userRepository.deleteById(id);
    }

    public Iterable<User> getAllUsers() {
        // Make this an admin only call
        return userRepository.findAll();
    }

    public Boolean validateUser(User user) {
        return !user.getUsername().isEmpty() && !user.getPassword().isEmpty() && !user.getEmail().isEmpty() && !user.getRole().isEmpty() && user.getId() != null;
    }
}
